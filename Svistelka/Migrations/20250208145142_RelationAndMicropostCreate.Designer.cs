// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Svistelka.Models;

#nullable disable

namespace Svistelka.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250208145142_RelationAndMicropostCreate")]
    partial class RelationAndMicropostCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Svistelka.Models.Micropost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Microposts");
                });

            modelBuilder.Entity("Svistelka.Models.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex(new[] { "FollowerId", "FollowedId" }, "UniqPairFollowedFollower")
                        .IsUnique();

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Svistelka.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordConfirmation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Password_Confirmation");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Svistelka.Models.Micropost", b =>
                {
                    b.HasOne("Svistelka.Models.User", "User")
                        .WithMany("Microposts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Microposts_ToUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Svistelka.Models.Relation", b =>
                {
                    b.HasOne("Svistelka.Models.User", "Followed")
                        .WithMany("RelationFolloweds")
                        .HasForeignKey("FollowedId")
                        .IsRequired()
                        .HasConstraintName("Followed");

                    b.HasOne("Svistelka.Models.User", "Follower")
                        .WithMany("RelationFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("Follower");

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Svistelka.Models.User", b =>
                {
                    b.Navigation("Microposts");

                    b.Navigation("RelationFolloweds");

                    b.Navigation("RelationFollowers");
                });
#pragma warning restore 612, 618
        }
    }
}
